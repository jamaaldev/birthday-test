{"version":3,"file":"birthday-test.umd.js","sources":["../src/index.ts"],"sourcesContent":["// \nclass DaysToCome {\n    textGreeting?: string |undefined;\n    textDaysLeft?: string |undefined;\n    textDayLeft?: string |undefined;\n    textBirthDay?: string |undefined;\n\n  \n\n  constructor(customTextDaysToCome:any) {\n    this.textGreeting = customTextDaysToCome?.textGreeting ;\n    this.textDaysLeft = customTextDaysToCome?.textDaysLeft  ;\n    this.textDayLeft = customTextDaysToCome?.textDayLeft ;\n    this.textBirthDay = customTextDaysToCome?.textBirthDay ;\n\n  }\n  YearsOld(DOB: string) {\n    const birthDay = parseInt(DOB.split(\"-\")[2]);\n    const birthMonth = parseInt(DOB.split(\"-\")[1]);\n    const birthYear = parseInt(DOB.split(\"-\")[0]);\n    let yearOld:number[] = [];\n    if (birthDay || birthMonth || birthYear) {\n      yearOld.push(new Date().getDate() < birthDay && new Date().getMonth() + 1 < birthMonth ? new Date().getFullYear() - birthYear - 1 : new Date().getFullYear() - birthYear);\n    }\n    if (yearOld.length) {\n      return yearOld;\n    }\n    return;\n  }\n  DaysToBirthDay(DOB: string, DaysLeft: string, el?: string, nameClass?: string) {\n    const birthDay = parseInt(DOB.split(\"-\")[2]);\n    const birthMonth = parseInt(DOB.split(\"-\")[1]);\n    const toDay = new Date().getDate();\n    const toMonth = new Date().getMonth() + 1;\n    \n    const diffDays = Math.floor((+new Date(birthMonth + \"-\" + birthDay) - +new Date(`'${toMonth}-${toDay}'`)) / 86400000);\n    const checkDayorDays = (dayOrDays: any) => {\n      switch (dayOrDays) {\n        case true:\n          return `${diffDays} ${this.textDayLeft || \" \"}`;\n        case false:\n          return `${diffDays} ${this.textDaysLeft || \" \"}`;\n      }\n      return;\n    };\n    const checkDaysLeft = (checkDays: number) => {\n      switch (new Date().getDate() >= checkDays) {\n        case true:\n          return `${checkDays}`;\n        case false:\n          return `${checkDays}`;\n      }\n    };\n    switch (diffDays) {\n      case 0:\n        return ` ${el ? `<${el} class=\"greeting\">` : \"\"} ${this.textGreeting || \"\"} ${el ? `</${el}>}` : \"\"}`;\n      default:\n        if (diffDays <= parseInt(DaysLeft) && 0 <= diffDays) {\n          return `${el ? `<${el} class=\"${nameClass}\">` : \"\"} ${this.textBirthDay || \"\"} ${checkDayorDays(checkDaysLeft(diffDays) && diffDays <= 1)} ${el ? `</${el}>` : \"\"}`;\n        }\n    }\n    return;\n  }\n}\n//====DaysGone=====\nclass DaysGone {\n  textDaysGone?: string;\n  textDayGone?: string;\n  textBirthDayGone?: string;\n  constructor(customTextDaysGone:any) {\n    this.textDaysGone = customTextDaysGone?.textDaysGone;\n    this.textDayGone = customTextDaysGone?.textDayGone;\n    this.textBirthDayGone = customTextDaysGone?.textBirthDayGone;\n  }\n\n  DaysGoneBirthDay(DOB: string, DayGone: any, el?: string, nameClass?: string) {\n    const birthDay = parseInt(DOB.split(\"-\")[2]);\n    const birthMonth = parseInt(DOB.split(\"-\")[1]);\n    const toDay = new Date().getDate();\n    const toMonth = new Date().getMonth() + 1;\n\n    const diffDays = Math.floor((+new Date(birthMonth + \"-\" + birthDay) - +new Date(`'${toMonth}-${toDay}'`)) / 86400000);\n\n    const goneDays = -diffDays;\n    switch (goneDays) {\n      case 1:\n        return ` ${el ? `<${el} class=\"${nameClass}\">` : \"\"}${this.textBirthDayGone || \"\"} ${goneDays} ${this.textDayGone || \" \"} ${el ? `</${el}>` : \"\"}`;\n      default:\n        if (goneDays > 1 && goneDays <= parseInt(DayGone)) {\n          return `${el ? `<${el} class=\"${nameClass}\">` : \"\"} ${this.textBirthDayGone || \"\"} ${goneDays} ${this.textDaysGone || \" \"} ${el ? `</${el}>` : \"\"}`;\n        }\n    }\n\n    return;\n  }\n}\n//######\nclass JointDate {\n  YearJoint = (jointed: any, dayFormat: any) => {\n    const jointYear = new Date(jointed).getFullYear();\n    const jointMonth = new Date(jointed).getMonth();\n    const jointDayNumber = new Date(jointed).getDate();\n    const jointDayName = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"][new Date(jointed).getDay()];\n\n    const months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n\n    const jointMonthName = months[jointMonth];\n\n    if (dayFormat === \"dayName\") {\n      return `${jointDayName} ${jointMonthName} ${jointYear}`;\n    }\n    if (dayFormat === \"dayNumber\") {\n      return `${jointDayNumber} ${jointMonthName} ${jointYear}`;\n    }\n    if (dayFormat === \"\") {\n      return `${jointMonthName} ${jointYear}`;\n    }\n    if (dayFormat === \"undefined\") {\n      return `${jointMonthName} ${jointYear}`;\n    }\n    if (dayFormat === undefined) {\n      return `${jointMonthName} ${jointYear}`;\n    }\n    if (dayFormat.length) {\n      return `${jointMonthName} ${jointYear}`;\n    }\n    if (dayFormat === null) {\n      return `${jointMonthName} ${jointYear}`;\n    }\n    return;\n  };\n}\n\nexport { DaysToCome, DaysGone, JointDate };\n"],"names":["constructor","customTextDaysGone","textDaysGone","this","textDayGone","textBirthDayGone","DaysGoneBirthDay","DOB","DayGone","el","nameClass","parseInt","split","birthMonth","toDay","Date","getDate","toMonth","getMonth","goneDays","Math","floor","birthDay","customTextDaysToCome","textGreeting","textDaysLeft","textDayLeft","textBirthDay","YearsOld","birthYear","yearOld","push","getFullYear","length","DaysToBirthDay","DaysLeft","diffDays","dayOrDays","checkDayorDays","checkDays","checkDaysLeft","YearJoint","jointed","dayFormat","jointYear","jointMonth","jointDayNumber","jointDayName","getDay","jointMonthName","undefined"],"mappings":"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"}